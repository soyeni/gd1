<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Babylon.js Village with Textured Planets</title>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylon.glTF2FileLoader.js"></script>
    <script src="https://cdn.babylonjs.com/serializers/babylon.glTFSerializer.js"></script>
</head>
<body>
    <canvas id="renderCanvas" style="width: 100%; height: 100%;"></canvas>
    <button id="downloadButton" style="position: absolute; top: 20px; left: 20px; z-index: 10;">Download Stickman GLB</button>
    
    <script>
        var canvas = document.getElementById("renderCanvas");
        var engine = new BABYLON.Engine(canvas, true);

        const createScene = function () {
            const scene = new BABYLON.Scene(engine);

            // Set up camera and light
            const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 1.5, Math.PI / 2.2, 15, new BABYLON.Vector3(0, 0, 0));
            camera.attachControl(canvas, true);
            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));

            // Import the village model
            BABYLON.SceneLoader.ImportMeshAsync("", "https://assets.babylonjs.com/meshes/", "village.glb");

            // Central "Sun" Sphere with Texture
            const sun = BABYLON.MeshBuilder.CreateSphere("sun", { diameter: 1.5 }, scene);
            sun.position = new BABYLON.Vector3(0, 8, 0); // Position above the village
            const sunMaterial = new BABYLON.StandardMaterial("sunMaterial", scene);
            sunMaterial.emissiveTexture = new BABYLON.Texture("https://www.solarsystemscope.com/textures/download/8k_sun.jpg", scene);
            sun.material = sunMaterial;

            // Function to create orbiting planets with specified texture and properties
            function createOrbitingPlanet(radius, textureURL, orbitDistance, speed) {
                const pivot = new BABYLON.TransformNode("pivot", scene);
                pivot.position = sun.position; // Place pivot at sun position

                const planet = BABYLON.MeshBuilder.CreateSphere("planet", { diameter: radius }, scene);
                planet.position.x = orbitDistance;
                planet.parent = pivot;
                const planetMaterial = new BABYLON.StandardMaterial("planetMaterial", scene);
                planetMaterial.diffuseTexture = new BABYLON.Texture(textureURL, scene);
                planet.material = planetMaterial;

                scene.registerBeforeRender(() => {
                    pivot.rotation.y += speed;
                });
            }

            // Create orbiting planets with the specified textures
            createOrbitingPlanet(0.5, "https://smd-cms.nasa.gov/wp-content/uploads/2023/09/PIA17386.jpg", 3, 0.01);  // Green planet
            createOrbitingPlanet(0.7, "https://planetpixelemporium.com/download/download.php?venusmap.jpg", 5, 0.008);  // Blue planet
            createOrbitingPlanet(1, "https://planet-texture-maps.fandom.com/wiki/Special:FilePath/Earth_Texture_Full.png", 7, 0.005);  // Red planet

            return scene;
        };

        const scene = createScene();
        engine.runRenderLoop(() => scene.render());

        window.addEventListener("resize", () => engine.resize());

        function exportToGLB() {
            BABYLON.GLTF2Export.GLBAsync(scene, "stickman.glb").then((glb) => {
                glb.downloadFiles();
            });
        }

        document.getElementById("downloadButton").addEventListener("click", exportToGLB);
    </script>
</body>
</html>
